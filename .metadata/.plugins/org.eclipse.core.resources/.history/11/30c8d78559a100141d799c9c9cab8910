package trb1914.picturetagger.data;

import java.awt.Image;
import java.io.File;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

import trb1914.debug.Debug;
import trb1914.helper.FileHelper;
import trb1914.helper.ImageHelper;
import trb1914.picturetagger.gui.ViewTile;

/**
 * Simple data holder object. Also used to show
 * the data in the table
 * @author Mees Gelein
 */
public class ImageData {

	public static ImageData cHover = null;
	///The default icon
	public static final ImageIcon DEFAULT_ICON = ImageHelper.getImageIcon("/trb1914/picturetagger/img/document_64.png");
	///The path of the file
	private String filePath = "";
	///The fileName
	public String fileName;
	///The thumbnail of the image we're showing
	private ImageIcon thumbnail = DEFAULT_ICON;
	///The label that holds the icon
	private JLabel thumbLabel = new JLabel(DEFAULT_ICON);

	/**
	 * Creates a new ImageData instance
	 * @param path
	 */
	public ImageData(String path){
		new Thread(new Runnable() {
			public void run() {
				thumbLabel.setEnabled(false);
				filePath = path;
				if(fileName == null){
					File f = new File(filePath);
					if(f.exists()){
						fileName = FileHelper.getFileName(f);
					}
				}
			}
		}).start();
	}

	/**
	 * Gets the associated tags. Empty if this has no tags
	 * @return
	 */
	public Tag getTags(){
		return TagParser.get(filePath);

	}

	/**
	 * Sets the thumbnail to the provided img
	 * @param img
	 */
	public void setThumb(Image img){
				thumbnail = new ImageIcon(img);
				thumbLabel.setIcon(thumbnail);
				thumbLabel.setEnabled(true);
	}

	/**
	 * The label that displays the thumnnail
	 * @return
	 */
	public JLabel getThumb(){
		return thumbLabel;
	}

	/**
	 * Makes the thumbnails for the files in the list
	 * @param list
	 */
	public static void makeThumbs(ArrayList<ImageData> list){
		new Thread(new Runnable(){
			public void run(){
				int max2 = list.size();
				int max1 = max2 / 2;
				ArrayList<ImageData> list1 = new ArrayList<ImageData>();
				list1.addAll(list);
				ArrayList<ImageData> list2 = new ArrayList<ImageData>();
				list2.addAll(list);
				//Start off two separate threads
				new Thread(new Runnable() {
					public void run() {
						for(int i = 0; i < max1; i++){
							getThumbnail(list1.get(i));
						}
					}
				}).start();
				new Thread(new Runnable() {
					public void run() {
						for(int i = max1; i < max2; i++){
							getThumbnail(list2.get(i));
						}
					}
				}).start();
			}
		}).start();
	}

	/**
	 * Tries to load the thumbnail for a specific ImageData object
	 * @param d
	 */
	private static void getThumbnail(ImageData d){
		File f = new File(d.filePath);
		if(f.exists()){
			try{
				if(!d.thumbLabel.isEnabled()){//if no thumb has been loaded yet
					Image img = ImageIO.read(f);
					img = img.getScaledInstance(ViewTile.THUMB_SIZE, ViewTile.THUMB_SIZE, Image.SCALE_FAST);
					d.setThumb(img);
				}
			}catch(Exception e){e.printStackTrace(); Debug.println(f.getAbsolutePath());}
		}else{
		}
	}
}
